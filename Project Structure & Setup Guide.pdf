# 📁 Project Structure & Setup Guide

## Complete Project Structure

```
court-data-fetcher/
│
├── 📄 app.py                          # Main Flask application
├── 📄 requirements.txt                # Python dependencies
├── 📄 .env.example                    # Environment variables template
├── 📄 .env                            # Environment variables (create from .env.example)
├── 📄 Dockerfile                      # Docker container configuration
├── 📄 docker-compose.yml              # Docker Compose setup
├── 📄 README.md                       # Comprehensive documentation
├── 📄 LICENSE                         # MIT License
├── 📄 .gitignore                      # Git ignore rules
│
├── 📁 templates/                      # HTML templates
│   ├── 📄 index.html                  # Main search page
│   ├── 📄 history.html                # Search history page
│   └── 📄 base.html                   # Base template (optional)
│
├── 📁 static/                         # Static files
│   ├── 📁 css/
│   │   └── 📄 custom.css              # Custom styles
│   ├── 📁 js/
│   │   └── 📄 app.js                  # Custom JavaScript
│   └── 📁 images/
│       └── 📄 favicon.ico             # Site favicon
│
├── 📁 tests/                          # Unit tests
│   ├── 📄 __init__.py
│   ├── 📄 test_app.py                 # Flask app tests
│   ├── 📄 test_scraper.py             # Scraper tests
│   └── 📄 conftest.py                 # Test configuration
│
├── 📁 docs/                           # Documentation
│   ├── 📄 API.md                      # API documentation
│   ├── 📄 DEPLOYMENT.md               # Deployment guide
│   └── 📄 CONTRIBUTING.md             # Contribution guidelines
│
├── 📁 scripts/                        # Utility scripts
│   ├── 📄 setup.py                    # Setup script
│   ├── 📄 backup_db.py                # Database backup
│   └── 📄 migrate_db.py               # Database migration
│
├── 📁 logs/                           # Application logs (created automatically)
├── 📁 temp/                           # Temporary files (created automatically)
├── 📁 downloads/                      # Downloaded PDFs (created automatically)
└── 📄 court_data.db                   # SQLite database (created automatically)
```

## 🚀 Quick Setup Commands

### 1. Clone and Setup
```bash
# Clone the repository
git clone https://github.com/surabhi-chandrakant/Court-Data-Fetcher-Mini-Dashboardgit
cd court-data-fetcher

# Create virtual environment
python -m venv venv

# Activate virtual environment
# Windows:
venv\Scripts\activate
# macOS/Linux:
source venv/bin/activate

# Install dependencies
pip install -r requirements.txt
```

### 2. Environment Configuration
```bash
# Copy environment template
cp .env.example .env

# Edit environment variables
nano .env  # or use your preferred editor
```

### 3. Initialize and Run
```bash
# Initialize database
python -c "from app import init_db; init_db()"

# Run the application
python app.py

# Or run with specific settings
DEBUG=True PORT=8000 python app.py
```

### 4. Docker Setup (Alternative)
```bash
# Build and run with Docker
docker build -t court-data-fetcher .
docker run -p 5000:5000 court-data-fetcher

# Or use Docker Compose
docker-compose up --build
```

## 📝 Essential Files to Create

### 1. Create `.gitignore`
```gitignore
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Virtual Environment
venv/
env/
ENV/

# Environment Variables
.env
.env.local
.env.production

# Database
*.db
*.sqlite3

# Logs
logs/
*.log

# Temporary files
temp/
tmp/
downloads/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Chrome/Selenium
*.crx
*.pem
chromedriver
geckodriver

# Flask
instance/
.webassets-cache
```

### 2. Create `LICENSE` (MIT License)
```
MIT License

Copyright (c) 2024 Court Data Fetcher

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```

### 3. Create Basic Unit Tests (`tests/test_app.py`)
```python
import pytest
import json
from app import app, init_db

@pytest.fixture
def client():
    app.config['TESTING'] = True
    app.config['DATABASE'] = ':memory:'
    
    with app.test_client() as client:
        with app.app_context():
            init_db()
        yield client

def test_index_page(client):
    """Test the main page loads"""
    rv = client.get('/')
    assert rv.status_code == 200
    assert b'Court Data Fetcher' in rv.data

def test_search_endpoint(client):
    """Test the search API endpoint"""
    search_data = {
        'case_type': 'WP(C)',
        'case_number': '12345',
        'filing_year': '2023'
    }
    
    rv = client.post('/search',
                     data=json.dumps(search_data),
                     content_type='application/json')
    
    assert rv.status_code == 200
    data = json.loads(rv.data)
    assert data['success'] is True
    assert 'data' in data

def test_invalid_search_data(client):
    """Test search with invalid data"""
    search_data = {
        'case_type': '',
        'case_number': '',
        'filing_year': ''
    }
    
    rv = client.post('/search',
                     data=json.dumps(search_data),
                     content_type='application/json')
    
    assert rv.status_code == 400
    data = json.loads(rv.data)
    assert data['success'] is False

def test_history_page(client):
    """Test the history page"""
    rv = client.get('/history')
    assert rv.status_code == 200
    assert b'Search History' in rv.data
```

### 4. Create Test Configuration (`tests/conftest.py`)
```python
import pytest
import tempfile
import os
from app import app, init_db

@pytest.fixture(scope='session')
def test_app():
    """Create application for testing"""
    db_fd, db_path = tempfile.mkstemp()
    
    app.config.update({
        'TESTING': True,
        'DATABASE': db_path,
        'SECRET_KEY': 'test-secret-key'
    })
    
    with app.app_context():
        init_db()
    
    yield app
    
    os.close(db_fd)
    os.unlink(db_path)

@pytest.fixture
def client(test_app):
    """Test client"""
    return test_app.test_client()

@pytest.fixture
def runner(test_app):
    """Test CLI runner"""
    return test_app.test_cli_runner()
```

### 5. Create Setup Script (`scripts/setup.py`)
```python
#!/usr/bin/env python3
"""
Setup script for Court Data Fetcher
"""

import os
import subprocess
import sys
from pathlib import Path

def run_command(command, description):
    """Run a command and handle errors"""
    print(f"📋 {description}...")
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.returncode != 0:
        print(f"❌ Error: {result.stderr}")
        return False
    else:
        print(f"✅ {description} completed successfully")
        return True

def main():
    """Main setup function"""
    print("🏛️ Court Data Fetcher Setup")
    print("=" * 50)
    
    # Check Python version
    if sys.version_info < (3, 8):
        print("❌ Error: Python 3.8 or higher is required")
        sys.exit(1)
    
    # Create necessary directories
    directories = ['logs', 'temp', 'downloads', 'static/css', 'static/js', 'static/images']
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"📁 Created directory: {directory}")
    
    # Install dependencies
    if not run_command("pip install -r requirements.txt", "Installing Python dependencies"):
        sys.exit(1)
    
    # Copy environment template
    if not os.path.exists('.env'):
        if os.path.exists('.env.example'):
            run_command("cp .env.example .env", "Creating environment file")
            print("⚠️  Please edit .env file with your configuration")
        else:
            print("⚠️  .env.example not found. Please create .env manually")
    
    # Initialize database
    try:
        from app import init_db
        init_db()
        print("✅ Database initialized successfully")
    except Exception as e:
        print(f"❌ Error initializing database: {e}")
        sys.exit(1)
    
    print("\n🎉 Setup completed successfully!")
    print("\nNext steps:")
    print("1. Edit .env file with your configuration")
    print("2. Run: python app.py")
    print("3. Open: http://localhost:5000")

if __name__ == "__main__":
    main()
```

### 6. Create Database Backup Script (`scripts/backup_db.py`)
```python
#!/usr/bin/env python3
"""
Database backup script for Court Data Fetcher
"""

import sqlite3
import os
import shutil
from datetime import datetime

def backup_database():
    """Create a backup of the SQLite database"""
    db_file = 'court_data.db'
    
    if not os.path.exists(db_file):
        print("❌ Database file not found")
        return False
    
    # Create backup filename with timestamp
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_file = f'backups/court_data_backup_{timestamp}.db'
    
    # Create backups directory
    os.makedirs('backups', exist_ok=True)
    
    try:
        # Copy database file
        shutil.copy2(db_file, backup_file)
        print(f"✅ Database backed up to: {backup_file}")
        
        # Export to SQL file as well
        sql_file = f'backups/court_data_backup_{timestamp}.sql'
        with sqlite3.connect(db_file) as conn:
            with open(sql_file, 'w') as f:
                for line in conn.iterdump():
                    f.write('%s\n' % line)
        
        print(f"✅ Database exported to SQL: {sql_file}")
        return True
        
    except Exception as e:
        print(f"❌ Backup failed: {e}")
        return False

if __name__ == "__main__":
    backup_database()
```

## 🔧 Development Workflow

### 1. Development Setup
```bash
# Install development dependencies
pip install pytest flask-testing black flake8 pytest-cov

# Run tests
pytest tests/ -v

# Run with coverage
pytest tests/ --cov=app --cov-report=html

# Code formatting
black app.py tests/

# Linting
flake8 app.py
```

### 2. Running the Application
```bash
# Development mode
export FLASK_ENV=development  # Deprecated in Flask 2.2+
export DEBUG=True
python app.py

# Production mode
export DEBUG=False
gunicorn --bind 0.0.0.0:5000 --workers 4 app:app
```

### 3. Database Management
```bash
# Backup database
python scripts/backup_db.py

# Reset database
rm court_data.db
python -c "from app import init_db; init_db()"

# View database
sqlite3 court_data.db
.tables
.schema queries
SELECT * FROM queries LIMIT 5;
```

## 📦 Deployment Options

### 1. Traditional Server
```bash
# Install system dependencies
sudo apt-get update
sudo apt-get install python3 python3-pip python3-venv google-chrome-stable

# Setup application
git clone <repository>
cd court-data-fetcher
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
pip install gunicorn

# Run with Gunicorn
gunicorn --bind 0.0.0.0:5000 --workers 4 --daemon app:app
```

### 2. Docker Deployment
```bash
# Build and run
docker build -t court-data-fetcher .
docker run -d -p 5000:5000 --name court-fetcher court-data-fetcher

# With Docker Compose
docker-compose up -d

# View logs
docker logs court-fetcher
```

### 3. Cloud Platform Deployment

#### Heroku
```bash
# Install Heroku CLI and login
heroku create court-data-fetcher
heroku config:set SECRET_KEY="your-secret-key"
heroku addons:create heroku-postgresql:hobby-dev
git push heroku main
```

#### Railway
```bash
# Connect to Railway
railway login
railway init
railway add
railway deploy
```

## 🔍 Troubleshooting

### Common Issues

1. **ChromeDriver Issues**
   ```bash
   # Update ChromeDriver
   pip install --upgrade selenium
   # Or install specific version
   pip install selenium==4.15.0
   ```

2. **Permission Errors**
   ```bash
   # Fix file permissions
   chmod +x scripts/setup.py
   chmod +x scripts/backup_db.py
   ```

3. **Database Lock Issues**
   ```bash
   # Check for running processes
   ps aux | grep python
   # Kill if necessary
   kill <process_id>
   ```

4. **Port Already in Use**
   ```bash
   # Find process using port 5000
   lsof -i :5000
   # Kill process
   kill <process_id>
   # Or use different port
   PORT=8000 python app.py
   ```

### Debugging Commands
```bash
# Check Python version
python --version

# Check installed packages
pip list

# Check Chrome installation
google-chrome --version

# Test database connection
python -c "import sqlite3; print('SQLite version:', sqlite3.sqlite_version)"

# Check environment variables
python -c "import os; print(os.environ.get('DEBUG', 'Not set'))"
```

This comprehensive setup guide covers everything needed to get your Court Data Fetcher application up and running in any environment!